snippet j:a
	${1:obj}.add('${2:selector expression}')${3}
snippet j:ac
	${1:obj}.addClass('${2:class name}')${3}
snippet j:af
	${1:obj}.after('${2:Some text <b>and bold!</b>}')${3}
snippet j:ajax
	$.ajax({
		url: '${1:mydomain.com/url}',
		type: '${2:POST}',
		dataType: '${3:xml/html/script/json}',
		data: $.param( $('${4:Element or Expression}') ),
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet j:ajaxc
	${1:obj}.ajaxComplete(function (${1:e}, xhr, settings) {
		${2:// callback}
	});
snippet j:ajaxe
	${1:obj}.ajaxError(function (${1:e}, xhr, settings, thrownError) {
		${2:// error callback}
	});
	${3}
snippet j:ajaxg
	$.get('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet j:ajaxp
	$.post('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet j:ajaxpr
	$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {
		${3: // Modify options, control originalOptions, store jqXHR, etc}
	});
snippet j:ajaxs
	${1:obj}.ajaxSend(function (${1:request, settings}) {
		${2:// error callback}
	});
	${3}
snippet j:ajaxsetup
	$.ajaxSetup({
		url: "${1:mydomain.com/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: $.param( $("${4:Element or Expression}") ),
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet j:ajaxstart
	$.ajaxStart(function () {
		${1:// handler for when an AJAX call is started and no other AJAX calls are in progress};
	});
	${2}
snippet j:ajaxstop
	$.ajaxStop(function () {
		${1:// handler for when all AJAX calls have been completed};
	});
	${2}
snippet j:ajaxsuccess
	$.ajaxSuccess(function (${1:e}, xhr, settings) {
		${2:// handler for when any AJAX call is successfully completed};
	});
	${2}
snippet j:andself
	${1:obj}.andSelf()${2}
snippet j:animate
	${1:obj}.animate({${2:param1: value1, param2: value2}}, ${3:speed})${4}
snippet j:append
	${1:obj}.append('${2:Some text <b>and bold!</b>}')${3}
snippet j:appendTo
	${1:obj}.appendTo('${2:selector expression}')${3}
snippet j:attr
	${1:obj}.attr('${2:attribute}', '${3:value}')${4}
snippet j:attrm
	${1:obj}.attr({'${2:attr1}': '${3:value1}', '${4:attr2}': '${5:value2}'})${6}
snippet j:before
	${1:obj}.before('${2:Some text <b>and bold!</b>}')${3}
snippet j:bind
	${1:obj}.bind('${2:event name}', function (${3:e}) {
		${4:// event handler}
	});
snippet j:blur
	${1:obj}.blur(function (${2:e}) {
		${3:// event handler}
	});
snippet j:C
	$.Callbacks()${1}
snippet j:Cadd
	${1:callbacks}.add(${2:callbacks})${3}
snippet j:Cdis
	${1:callbacks}.disable()${2}
snippet j:Cempty
	${1:callbacks}.empty()${2}
snippet j:Cfire
	${1:callbacks}.fire(${2:args})${3}
snippet j:Cfired
	${1:callbacks}.fired()${2}
snippet j:Cfirew
	${1:callbacks}.fireWith(${2:this}, ${3:args})${4}
snippet j:Chas
	${1:callbacks}.has(${2:callback})${3}
snippet j:Clock
	${1:callbacks}.lock()${2}
snippet j:Clocked
	${1:callbacks}.locked()${2}
snippet j:Crem
	${1:callbacks}.remove(${2:callbacks})${3}
snippet j:change
	${1:obj}.change(function (${2:e}) {
		${3:// event handler}
	});
snippet j:children
	${1:obj}.children('${2:selector expression}')${3}
snippet j:clearq
	${1:obj}.clearQueue(${2:'queue name'})${3}
snippet j:click
	${1:obj}.click(function (${2:e}) {
		${3:// event handler}
	});
snippet j:clone
	${1:obj}.clone()${2}
snippet j:contains
	$.contains(${1:container}, ${2:contents});
snippet j:css
	${1:obj}.css('${2:attribute}', '${3:value}')${4}
snippet j:csshooks
	$.cssHooks['${1:CSS prop}'] = {
		get: function (elem, computed, extra) {
			${2: // handle getting the CSS property}
		},
		set: function (elem, value) {
			${3: // handle setting the CSS value}
		}
	};
snippet j:cssm
	${1:obj}.css({${2:attribute1}: '${3:value1}', ${4:attribute2}: '${5:value2}'})${6}
snippet j:def
	$.Deferred()${1}
snippet j:Dalways
	${1:deferred}.always(${2:callbacks})${3}
snippet j:Ddone
	${1:deferred}.done(${2:callbacks})${3}
snippet j:Dfail
	${1:deferred}.fail(${2:callbacks})${3}
snippet j:Disrej
	${1:deferred}.isRejected()${2}
snippet j:Disres
	${1:deferred}.isResolved()${2}
snippet j:Dnotify
	${1:deferred}.notify(${2:args})${3}
snippet j:Dnotifyw
	${1:deferred}.notifyWith(${2:this}, ${3:args})${4}
snippet j:Dpipe
	${1:deferred}.then(${2:doneFilter}, ${3:failFilter}, ${4:progressFilter})${5}
snippet j:Dprog
	${1:deferred}.progress(${2:callbacks})${3}
snippet j:Dprom
	${1:deferred}.promise(${2:target})${3}
snippet j:Drej
	${1:deferred}.reject(${2:args})${3}
snippet j:Drejw
	${1:deferred}.rejectWith(${2:this}, ${3:args})${4}
snippet j:Dres
	${1:deferred}.resolve(${2:args})${3}
snippet j:Dresw
	${1:deferred}.resolveWith(${2:this}, ${3:args})${4}
snippet j:Dstate
	${1:deferred}.state()${2}
snippet j:Dthen
	${1:deferred}.then(${2:doneCallbacks}, ${3:failCallbacks}, ${4:progressCallbacks})${5}
snippet j:Dwhen
	$.when(${1:deferreds})${2}
snippet j:data
	${1:obj}.data(${2:obj})${3}
snippet j:dataa
	$.data('${1:selector expression}', '${2:key}'${3:, 'value'})${4}
snippet j:dblclick
	${1:obj}.dblclick(function (${2:e}) {
		${3:// event handler}
	});
snippet j:delay
	${1:obj}.delay('${2:slow/400/fast}'${3:, 'queue name'})${4}
snippet j:dele
	${1:obj}.delegate('${2:selector expression}', '${3:event name}', function (${4:e}) {
		${5:// event handler}
	});
snippet j:deq
	${1:obj}.dequeue(${2:'queue name'})${3}
snippet j:deqq
	$.dequeue('${1:selector expression}'${2:, 'queue name'})${3}
snippet j:detach
	${1:obj}.detach('${2:selector expression}')${3}
snippet j:die
	${1:obj}.die(${2:event}, ${3:handler})${4}
snippet j:each
	${1:obj}.each(function (index) {
		${2:this.innerHTML = this + " is the element, " + index + " is the position";}
	});
snippet j:el
	$('<${1}/>'${2:, {}})${3}
snippet j:eltrim
	$.trim('${1:string}')${2}
snippet j:empty
	${1:obj}.empty()${2}
snippet j:end
	${1:obj}.end()${2}
snippet j:eq
	${1:obj}.eq(${2:element index})${3}
snippet j:error
	${1:obj}.error(function (${2:e}) {
		${3:// event handler}
	});
snippet j:eventsmap
	{
		:f${1}
	}
snippet j:ex
	$.extend(${1:true, }${2:target}, ${3:obj})${4}
snippet j:fadein
	${1:obj}.fadeIn('${2:slow/400/fast}')${3}
snippet j:fadeinc
	${1:obj}.fadeIn('slow/400/fast', function () {
		${2:// callback};
	});
snippet j:fadeout
	${1:obj}.fadeOut('${2:slow/400/fast}')${3}
snippet j:fadeoutc
	${1:obj}.fadeOut('slow/400/fast', function () {
		${2:// callback};
	});
snippet j:fadeto
	${1:obj}.fadeTo('${2:slow/400/fast}', ${3:0.5})${4}
snippet j:fadetoc
	${1:obj}.fadeTo('slow/400/fast', ${2:0.5}, function () {
		${3:// callback};
	});
snippet j:filter
	${1:obj}.filter('${2:selector expression}')${3}
snippet j:filtert
	${1:obj}.filter(function (${2:index}) {
		${3}
	})${4}
snippet j:find
	${1:obj}.find('${2:selector expression}')${3}
snippet j:focus
	${1:obj}.focus(function (${2:e}) {
		${3:// event handler}
	});
snippet j:focusin
	${1:obj}.focusIn(function (${2:e}) {
		${3:// event handler}
	});
snippet j:focusout
	${1:obj}.focusOut(function (${2:e}) {
		${3:// event handler}
	});
snippet j:get
	${1:obj}.get(${2:element index})${3}
snippet j:getjson
	$.getJSON('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet j:getscript
	$.getScript('${1:mydomain.com/url}', function (script, textStatus, jqXHR) {
		${2:// callback}
	});
snippet j:grep
	$.grep(${1:array}, function (item, index) {
		${2}
	}${3:, true});
snippet j:hasc
	${1:obj}.hasClass('${2:className}')${3}
snippet j:hasd
	$.hasData('${1:selector expression}');
snippet j:height
	${1:obj}.height(${2:integer})${3}
snippet j:hide
	${1:obj}.hide('${2:slow/400/fast}')${3}
snippet j:hidec
	${1:obj}.hide('${2:slow/400/fast}', function () {
		${3:// callback}
	});
snippet j:hover
	${1:obj}.hover(function (${2:e}) {
		${3:// event handler}
	}, function ($2) {
		${4:// event handler}
	});${5}
snippet j:html
	${1:obj}.html('${2:Some text <b>and bold!</b>}')${3}
snippet j:inarr
	$.inArray(${1:value}, ${2:array});
snippet j:insa
	${1:obj}.insertAfter('${2:selector expression}')${3}
snippet j:insb
	${1:obj}.insertBefore('${2:selector expression}')${3}
snippet j:is
	${1:obj}.is('${2:selector expression}')${3}
snippet j:isarr
	$.isArray(${1:obj})${2}
snippet j:isempty
	$.isEmptyObject(${1:obj})${2}
snippet j:isfunc
	$.isFunction(${1:obj})${2}
snippet j:isnum
	$.isNumeric(${1:value})${2}
snippet j:isobj
	$.isPlainObject(${1:obj})${2}
snippet j:iswin
	$.isWindow(${1:obj})${2}
snippet j:isxml
	$.isXMLDoc(${1:node})${2}
snippet j:jj
	$('${1:selector}')${2}
snippet j:kdown
	${1:obj}.keydown(function (${2:e}) {
		${3:// event handler}
	});
snippet j:kpress
	${1:obj}.keypress(function (${2:e}) {
		${3:// event handler}
	});
snippet j:kup
	${1:obj}.keyup(function (${2:e}) {
		${3:// event handler}
	});
snippet j:last
	${1:obj}.last('${1:selector expression}')${3}
snippet j:live
	${1:obj}.live('${2:events}', function (${3:e}) {
		${4:// event handler}
	});
snippet j:load
	${1:obj}.load(function (${2:e}) {
		${3:// event handler}
	});
snippet j:loadf
	${1:obj}.load('${2:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (responseText, textStatus, xhr) {
			${3:// success callback}
		}
	});
snippet j:makearray
	$.makeArray(${1:obj});
snippet j:map
	${1:obj}.map(function (${2:index}, ${3:element}) {
		${4:// callback}
	});
snippet j:ma
	$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {
		${4:// callback}
	});
snippet j:merge
	$.merge(${1:target}, ${2:original});
snippet j:mdown
	${1:obj}.mousedown(function (${2:e}) {
		${3:// event handler}
	});
snippet j:menter
	${1:obj}.mouseenter(function (${2:e}) {
		${3:// event handler}
	});
snippet j:mleave
	${1:obj}.mouseleave(function (${2:e}) {
		${3:// event handler}
	});
snippet j:mmove
	${1:obj}.mousemove(function (${2:e}) {
		${3:// event handler}
	});
snippet j:mout
	${1:obj}.mouseout(function (${2:e}) {
		${3:// event handler}
	});
snippet j:mover
	${1:obj}.mouseover(function (${2:e}) {
		${3:// event handler}
	});
snippet j:mup
	${1:obj}.mouseup(function (${2:e}) {
		${3:// event handler}
	});
snippet j:next
	${1:obj}.next('${2:selector expression}')${3}
snippet j:nexta
	${1:obj}.nextAll('${2:selector expression}')${3}
snippet j:nextu
	${1:obj}.nextUntil('${2:selector expression}'${3:, 'filter expression'})${4}
snippet j:not
	${1:obj}.not('${2:selector expression}')${3}
snippet j:off
	${1:obj}.off('${2:events}', '${3:selector expression}'${4:, handler})${5}
snippet j:offset
	${1:obj}.offset()${2}
snippet j:offsetp
	${1:obj}.offsetParent()${2}
snippet j:on
	${1:obj}.on('${2:events}', '${3:selector expression}', function (${4:e}) {
		${5:// event handler}
	});
snippet j:one
	${1:obj}.one('${2:event name}', function (${3:e}) {
		${4:// event handler}
	});
snippet j:outerh
	${1:obj}.outerHeight()${2}
snippet j:outerw
	${1:obj}.outerWidth()${2}
snippet j:param
	$.param(${1:obj})${2}
snippet j:parent
	${1:obj}.parent('${2:selector expression}')${3}
snippet j:parents
	${1:obj}.parents('${2:selector expression}')${3}
snippet j:parentsu
	${1:obj}.parentsUntil('${2:selector expression}'${3:, 'filter expression'})${4}
snippet j:parsejson
	$.parseJSON(${1:data})${2}
snippet j:parsexml
	$.parseXML(${1:data})${2}
snippet j:pos
	${1:obj}.position()${2}
snippet j:prepend
	${1:obj}.prepend('${2:Some text <b>and bold!</b>}')${3}
snippet j:prependto
	${1:obj}.prependTo('${2:selector expression}')${3}
snippet j:prev
	${1:obj}.prev('${2:selector expression}')${3}
snippet j:preva
	${1:obj}.prevAll('${2:selector expression}')${3}
snippet j:prevu
	${1:obj}.prevUntil('${2:selector expression}'${3:, 'filter expression'})${4}
snippet j:promise
	${1:obj}.promise(${2:'fx'}, ${3:target})${4}
snippet j:prop
	${1:obj}.prop('${2:property name}')${3}
snippet j:proxy
	$.proxy(${1:function}, ${2:this})${3}
snippet j:pushstack
	${1:obj}.pushStack(${2:elements})${3}
snippet j:queue
	${1:obj}.queue(${2:name}${3:, newQueue})${4}
snippet j:queuee
	$.queue(${1:element}${2:, name}${3:, newQueue})${4}
snippet j:ready
	$(function () {
		${1}
	});
snippet j:rem
	${1:obj}.remove()${2}
snippet j:rema
	${1:obj}.removeAttr('${2:attribute name}')${3}
snippet j:remc
	${1:obj}.removeClass('${2:class name}')${3}
snippet j:remd
	${1:obj}.removeData('${2:key name}')${3}
snippet j:remdd
	$.removeData(${1:element}${2:, 'key name}')${3}
snippet j:remp
	${1:obj}.removeProp('${2:property name}')${3}
snippet j:repa
	${1:obj}.replaceAll(${2:target})${3}
snippet j:repw
	${1:obj}.replaceWith(${2:content})${3}
snippet j:reset
	${1:obj}.reset(function (${2:e}) {
		${3:// event handler}
	});
snippet j:resize
	${1:obj}.resize(function (${2:e}) {
		${3:// event handler}
	});
snippet j:scroll
	${1:obj}.scroll(function (${2:e}) {
		${3:// event handler}
	});
snippet j:scrolll
	${1:obj}.scrollLeft(${2:value})${3}
snippet j:scrollt
	${1:obj}.scrollTop(${2:value})${3}
snippet j:sdown
	${1:obj}.slideDown('${2:slow/400/fast}')${3}
snippet j:sdownc
	${1:obj}.slideDown('${2:slow/400/fast}', function () {
		${3:// callback};
	});
snippet j:select
	${1:obj}.select(function (${2:e}) {
		${3:// event handler}
	});
snippet j:serialize
	${1:obj}.serialize()${2}
snippet j:serializea
	${1:obj}.serializeArray()${2}
snippet j:show
	${1:obj}.show('${2:slow/400/fast}')${3}
snippet j:showc
	${1:obj}.show('${2:slow/400/fast}', function () {
		${3:// callback}
	});
snippet j:sib
	${1:obj}.siblings('${2:selector expression}')${3}
snippet j:size
	${1:obj}.size()${2}
snippet j:slice
	${1:obj}.slice(${2:start}${3:, end})${4}
snippet j:stoggle
	${1:obj}.slideToggle('${2:slow/400/fast}')${3}
snippet j:stop
	${1:obj}.stop('${2:queue}', ${3:false}, ${4:false})${5}
snippet j:submit
	${1:obj}.submit(function (${2:e}) {
		${3:// event handler}
	});
snippet j:sup
	${1:obj}.slideUp('${2:slow/400/fast}')${3}
snippet j:supc
	${1:obj}.slideUp('${2:slow/400/fast}', function () {
		${3:// callback};
	});
snippet j:text
	${1:obj}.text(${2:'some text'})${3}
snippet j:this
	$(this)${1}
snippet j:toarr
	${1:obj}.toArray()
snippet j:tog
	${1:obj}.toggle(function (${2:e}) {
		${3:// event handler}
	}, function ($2) {
		${4:// event handler}
	});
	${4}
snippet j:togclass
	${1:obj}.toggleClass('${2:class name}')${3}
snippet j:togsh
	${1:obj}.toggle('${2:slow/400/fast}')${3}
snippet j:trig
	${1:obj}.trigger('${2:event name}')${3}
snippet j:trigh
	${1:obj}.triggerHandler('${2:event name}')${3}
snippet j:$trim
	$.trim(${1:str})${2}
snippet j:$type
	$.type(${1:obj})${2}
snippet j:unbind
	${1:obj}.unbind('${2:event name}')${3}
snippet j:undele
	${1:obj}.undelegate(${2:selector expression}, ${3:event}, ${4:handler})${5}
snippet j:uniq
	$.unique(${1:array})${2}
snippet j:unload
	${1:obj}.unload(function (${2:e}) {
		${3:// event handler}
	});
snippet j:unwrap
	${1:obj}.unwrap()${2}
snippet j:val
	${1:obj}.val('${2:text}')${3}
snippet j:width
	${1:obj}.width(${2:integer})${3}
snippet j:wrap
	${1:obj}.wrap('${2:&lt;div class="extra-wrapper"&gt;&lt;/div&gt;}')${3}
